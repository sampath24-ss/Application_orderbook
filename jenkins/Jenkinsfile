pipeline {
    agent any
    
    tools {
        nodejs 'node16'
    }
    
    environment {
        SONAR_PROJECT_KEY = 'backend-nodejs-app'
        OWASP_REPORT_DIR = "${WORKSPACE}/dependency-check-report"
        SCANNER_HOME = tool 'mysonar'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('backend') {
                    sh '''
                        set -x
                        echo "Installing dependencies..."
                        npm ci
                    '''
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('backend') {
                    sh '''
                        set -x
                        echo "Building application..."
                        npm run build
                    '''
                }
            }
        }
        
        stage('Test') {
            steps {
                dir('backend') {
                    sh '''
                        set -x
                        echo "Running tests..."
                        npm test || true
                    '''
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                dir('backend') {
                    withSonarQubeEnv('mysonar') {
                        sh """
                            set -x
                            echo "Running SonarQube analysis..."
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.sources=src \
                            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
                            -Dsonar.exclusions=**/node_modules/**,**/dist/**
                        """
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('OWASP Dependency Check') {
            steps {
                dir('backend') {
                    dependencyCheck additionalArguments: """
                        --scan ./package-lock.json 
                        --format ALL 
                        --out ${OWASP_REPORT_DIR} 
                        --project backend-nodejs
                        --enableExperimental
                    """, odcInstallation: 'OWASP-DC'
                    
                    dependencyCheckPublisher pattern: "${OWASP_REPORT_DIR}/dependency-check-report.xml"
                }
            }
        }
        
        stage('Archive') {
            steps {
                archiveArtifacts artifacts: 'backend/dist/**/*', allowEmptyArchive: true
                archiveArtifacts artifacts: "${OWASP_REPORT_DIR}/**/*", allowEmptyArchive: true
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}